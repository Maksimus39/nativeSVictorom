// --------1 группа данных-----------
// примитивы:
// number, string, boolean, null, undefined, NaN, Infinity, BigInt, Symbol

//------------------------------------------------------------------------------------------------------

//--------2 группа данных --------
// объекты:
// array, function, object

// Отличия объектов от примитивов
//1. Сложная структура
//2. Имеют свойства и методы
//3. Ссылочный тип данных

const num = 5

const obj = {}             // №234 ----таким образом для объекта создаётся ссылка в памяти компъютера на объект

const num_2 = num    // таким образом будут храниться две пятёрки в одной ячейки памяти ( 5 & 5 )

const obj_2 = obj        // а в этом случае объект один, а ссылок может быть сколько угодно ------ и создание нового объекта не происходит

obj_2.name = 'Alex'
console.log(obj)            // а здесь из-за того что объект ссылочный тип данных я через точку присвоил объекту имя и оно присволось и первому и второму объекту

//const arr = []       // под капотом создастся новый массив с таким синтаксисом --------new Array()---------

class Student {

}

const st = new Student() // ----new Student()---- это функция конструктор.

// И сейчас мы подошли к теме имьютабельная работа с данными, когда например с сервера запрашиваешь список студентов, но он возвращает не оригинал, а лишь
// копию этих данных для того чтобы случайно не внести правки в оригинал и лишь в отдельных случаях кто-то может вносить правки в state оригинала.
// А хочешь внести изменения сделай копию и вноси изменения.

const user = {name: 'Bob', age: 22, isStudent: false}


//const copyUser = {name: 'Bob', age: 22}  // это первый вариант положить в эту переменную содержимое предыдущей. А для работы в функции я её закомментировал

//const copyUser = {...user}                // а данный синтаксис называется спред оператор и он копирует содержимое user в copyUser
// Боб стал студентом
const copyUser = {...user, isStudent: true}  // это имъютабельная работа с данными и при изменении какого либо параметра пишем сам параметр и изменяем его свойства.

const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
const copyArr = [...arr]                        // таким образом копируется массив спред оператором

console.log(user === copyUser) // false

function stateChecker(current, next) {
    if (current === next) {
        alert('изменений нет,страницу не меняем')
    } else {
        alert('изменения произошли,перерисовываем')
    }
}

stateChecker(user, copyUser)

const students = [            // state
    {name: 'Bob', age: 34},
    {name: 'Alex', age: 32}
]

//---------CRUD-------------
//CREATE --------создание или добавление студента
//READ-----------вывод списка для чтения или фильтруют данные (filter, sort, search)
//UPDATE---------обновление редактирование файла или статуса товара
//DELETE---------удаление категории товаров и услуг


//CREATE-----------сейчас поработаем с этим методом------------------------------------------------------------------------------------------------------------

const newStudent = {name: 'John', age: 23}  // -----тут я добавляю нового студента к существующему state.


const students_1 = [...students, newStudent]               //----таким образом я получил две ссылки на старый объект и один новый объект [old, old, new]
console.log(students_1)                                         // ----тут я вывел в консоль обновлённый массив студентов
stateChecker(students, students_1)
//---------------------------------------------------------------------------------------------------------------------------------------------------------------


//UPDATE -----------СЕЙЧАС ПОРАБОТАЕМ С ЭТИМ МЕТОДОМ------------------------------------------------------------------------------------------------------------

const students_2 = students_1.map(el => el.name === 'John'
    ? {...el, age: 24}  // true
    : el                // false
)
console.log(students, students_1, students_2)
//---------------------------------------------------------------------------------------------------------------------------------------------------------------


//DELETE -----------СЕЙЧАС ПОРАБОТАЕМ С ЭТИМ МЕТОДОМ--------------------------------------------------------------------------------------------------------------

const students_3 = students_2.filter(st=>st.name !=='Bob')     // -------сходить на суппорт и выяснить почему элемент filter не отображает метод name
console.log(students_3)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------